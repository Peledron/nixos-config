{
  config,
  lib,
  pkgs,
  self,
  inputs,
  netport,
  vlans,
  ...
}: let
  datalocation = "/var/lib/containerdata/librenms";
  br_local_container_name = "br0cont";
in {
  age.secrets = {
    librenms_COMMON_env.file = "${self}/.secrets/global/containers/librenms/librenms_COMMON_env.age";
    librenms_MARIADB_env.file = "${self}/.secrets/global/containers/librenms/librenms_MARIADB_env.age";
    librenms_LIBRENMS_env.file = "${self}/.secrets/global/containers/librenms/librenms_LIBRENMS_env.age";
    librenms_MSMTPD_env.file = "${self}/.secrets/global/containers/librenms/librenms_MSMTPD_env.age";
    librenms_DISPATCHER_env.file = "${self}/.secrets/global/containers/librenms/librenms_DISPATCHER_env.age";
    librenms_SYSLOGNG_env.file = "${self}/.secrets/global/containers/librenms/librenms_SYSLOGNG_env.age";
    librenms_SNMPTRAPD_env.file = "${self}/.secrets/global/containers/librenms/librenms_SNMPTRAPD_env.age";
  };
  networking.firewall.allowedTCPPorts = [8000];
  systemd = {
    tmpfiles.rules = [
      "d ${datalocation} 0750 root root -"
      "d ${datalocation}/db 0750 root root -"
    ];
    # these were all auto generated by nix run github:aksiksi/compose2nix --
    # --> see https://github.com/aksiksi/compose2nix
    targets."podman-compose-librenms-root" = {
      # Root service
      # When started, this will automatically create all resources and start
      # the containers. When stopped, this will teardown all resources.
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };
    services = {
      # Networks
      "podman-network-librenms_default" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f librenms_default";
        };
        script = ''
          podman network exists librenms_default || podman network create --ipv6 -o vlan=${builtins.toString (builtins.elemAt vlans 2)} -o isolate=1 librenms_default
        '';
        partOf = ["podman-compose-librenms-root.target"];
        wantedBy = ["podman-compose-librenms-root.target"];
      };
      # Services
      # --> these are needed to ensure dependency and restarting
      "podman-librenms" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        upheldBy = [
          "podman-librenms_db.service"
          "podman-librenms_msmtpd.service"
          "podman-librenms_redis.service"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_db" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_redis" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_dispatcher" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        upheldBy = [
          "podman-librenms.service"
          "podman-librenms_redis.service"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_msmtpd" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_snmptrapd" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        upheldBy = [
          "podman-librenms.service"
          "podman-librenms_redis.service"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
      "podman-librenms_syslogng" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-librenms_default.service"
        ];
        requires = [
          "podman-network-librenms_default.service"
        ];
        partOf = [
          "podman-compose-librenms-root.target"
        ];
        upheldBy = [
          "podman-librenms.service"
          "podman-librenms_redis.service"
        ];
        wantedBy = [
          "podman-compose-librenms-root.target"
        ];
      };
    };
  };
  virtualisation.oci-containers.containers = {
    # Containers
    ## librenms application
    "librenms" = {
      image = "librenms/librenms:latest";
      hostname = "librenms";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
      ];
      volumes = [
        "${datalocation}:/data:rw"
      ];
      ports = [
        "8000:8000/tcp"
      ];
      dependsOn = [
        "librenms_db"
        "librenms_msmtpd"
        "librenms_redis"
      ];
      log-driver = "journald";
      extraOptions = [
        "--cap-add=NET_ADMIN"
        "--cap-add=NET_RAW"
        "--network-alias=librenms"
        "--network=librenms_default"
        #"--ip6=fd00:3::3"
      ];
      autoStart = true;
    };
    # maria-db backend
    "librenms_db" = {
      image = "mariadb";
      hostname = "librenms-db";
      cmd = [
        # command line attributes for the entrypoint command
        "mariadbd"
        "--innodb-file-per-table=1"
        "--lower-case-table-names=0"
        "--character-set-server=utf8mb4"
        "--collation-server=utf8mb4_unicode_ci"
      ];
      volumes = [
        "${datalocation}/db:/var/lib/mysql"
      ];
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
        config.age.secrets.librenms_MARIADB_env.path
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=librenms-db"
        "--network=librenms_default"
      ];
      autoStart = true;
    };
    # redis memcache
    "librenms_redis" = {
      image = "redis";
      hostname = "librenms-redis";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=librenms-redis"
        "--network=librenms_default"
      ];
      autoStart = true;
    };

    "librenms_dispatcher" = {
      image = "librenms/librenms:latest";
      hostname = "librenms-dispatcher";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
        config.age.secrets.librenms_DISPATCHER_env.path
      ];
      volumes = [
        "${datalocation}:/data:rw"
      ];
      dependsOn = [
        "librenms"
        "librenms_redis"
      ];
      log-driver = "journald";
      extraOptions = [
        "--cap-add=NET_ADMIN"
        "--cap-add=NET_RAW"
        "--network-alias=librenms-dispatcher"
        "--network=librenms_default"
      ];
      autoStart = true;
    };
    "librenms_msmtpd" = {
      image = "crazymax/msmtpd:latest";
      hostname = "librenms-msmtpd";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
        config.age.secrets.librenms_MSMTPD_env.path
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=librenms-msmtpd"
        "--network=librenms_default"
      ];
      autoStart = true;
    };

    "librenms_snmptrapd" = {
      image = "librenms/librenms:latest";
      hostname = "librenms-snmptrapd";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
        config.age.secrets.librenms_SNMPTRAPD_env.path
      ];
      volumes = [
        "${datalocation}:/data:rw"
      ];
      ports = [
        "162:162/tcp"
        "162:162/udp"
      ];
      dependsOn = [
        "librenms"
        "librenms_redis"
      ];
      log-driver = "journald";
      extraOptions = [
        "--cap-add=NET_ADMIN"
        "--cap-add=NET_RAW"
        "--network-alias=snmptrapd"
        "--network=librenms_default"
      ];
      autoStart = true;
    };

    "librenms_syslogng" = {
      image = "librenms/librenms:latest";
      hostname = "librenms-syslogng";
      environmentFiles = [
        config.age.secrets.librenms_COMMON_env.path
        config.age.secrets.librenms_SYSLOGNG_env.path
      ];
      volumes = [
        "${datalocation}:/data:rw"
      ];
      ports = [
        "514:514/tcp"
        "514:514/udp"
      ];
      dependsOn = [
        "librenms"
        "librenms_redis"
      ];
      log-driver = "journald";
      extraOptions = [
        "--cap-add=NET_ADMIN"
        "--cap-add=NET_RAW"
        "--network-alias=syslogng"
        "--network=librenms_default"
      ];
      autoStart = true;
    };
  };
}
