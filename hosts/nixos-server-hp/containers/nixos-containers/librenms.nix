{
  config,
  lib,
  pkgs,
  self,
  inputs,
  vlans,
  ...
}: let
  br_local_container_name = "br0cont";
  netport = "eth0";
in {
  containers.librenms-oxidized = {
    # librenms is a monitoring solution, oxidized is a network device configuration backup system
    autoStart = true;
    extraFlags = ["-U"]; # run as user instead of root
    privateNetwork = true;
    hostBridge = "${br_local_container_name}";
    bindMounts."/persist/ssh/ssh_host_ed25519_key".isReadOnly = true;
    config = {
      config,
      pkgs,
      lib,
      ...
    }: {
      imports = [inputs.agenix.nixosModules.default];
      # pass the private key to the container for agenix to decrypt the secret

      # import database password with age
      age = {
        identityPaths = ["/persist/ssh/ssh_host_ed25519_key"];
        secrets = {
          librenms_COMMON_env.file = "${self}/.secrets/global/containers/librenms_COMMON_env.age";
          librenms_MARIADB_env.file = "${self}/.secrets/global/containers/librenms_MARIADB_env.age";
          librenms_LIBRENMS_env.file = "${self}/.secrets/global/containers/librenms_LIBRENMS_env.age";
          librenms_MSMTPD_env.file = "${self}/.secrets/global/containers/librenms_MSMTPD_env.age";
          librenms_DISPATCHER_env.file = "${self}/.secrets/global/containers/librenms_DISPATCHER_env.age";
          librenms_SYSLOGNG_env.file = "${self}/.secrets/global/containers/librenms_SYSLOGNG_env.age";
          librenms_SNMPTRAPD_env.file = "${self}/.secrets/global/containers/librenms_SNMPTRAPD_env.age";
        };
      };

      time.timeZone = "Europe/Brussels"; # needs to be set for librenms

      services.resolved.enable = true;
      networking = {
        interfaces = {
          ${netport} = {
            ipv4.addresses = [
              {
                address = "192.168.1.3";
                prefixLength = 24;
              }
            ];
            ipv6.addresses = [
              {
                address = "fd00:3::3"; # empty will use dhcp and generate a static address from the mac address`
                prefixLength = 64;
              }
              {
                address = ""; # empty will use dhcp
                prefixLength = 64;
              }
            ];
          };
        };
        defaultGateway = {
          address = "192.168.1.2";
          interface = "${netport}";
        };
        defaultGateway6 = {
          address = "fd00:3::1";
          interface = "${netport}";
        };

        useNetworkd = true;
        firewall = {
          enable = true;
          allowedTCPPorts = [80 443];
        };
        useHostResolvConf = lib.mkForce false;
      };
      virtualisation.podman = {
        enable = true;
        autoPrune.enable = true;
        dockerCompat = true;
        defaultNetwork.settings = {
          # Required for container networking to be able to use names.
          dns_enabled = true;
        };
      };
      virtualisation.oci-containers.backend = "podman";
      systemd = {
        # these were all auto generated by nix run github:aksiksi/compose2nix --
        # --> see https://github.com/aksiksi/compose2nix
        targets."podman-compose-librenms-root" = {
          # Root service
          # When started, this will automatically create all resources and start
          # the containers. When stopped, this will teardown all resources.
          unitConfig = {
            Description = "Root target generated by compose2nix.";
          };
          wantedBy = ["multi-user.target"];
        };
        services = {
          # Networks
          "podman-network-librenms_default" = {
            path = [pkgs.podman];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
              ExecStop = "podman network rm -f librenms_default";
            };
            script = ''
              podman network exists librenms_default || podman network create librenms_default --ipv6
            '';
            partOf = ["podman-compose-librenms-root.target"];
            wantedBy = ["podman-compose-librenms-root.target"];
          };
          # Services
          # --> these are needed to ensure dependency and restarting
          "podman-librenms" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            upheldBy = [
              "podman-librenms_db.service"
              "podman-librenms_msmtpd.service"
              "podman-librenms_redis.service"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_db" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_redis" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_dispatcher" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            upheldBy = [
              "podman-librenms.service"
              "podman-librenms_redis.service"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_msmtpd" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_snmptrapd" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            upheldBy = [
              "podman-librenms.service"
              "podman-librenms_redis.service"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
          "podman-librenms_syslogng" = {
            serviceConfig = {
              Restart = lib.mkOverride 500 "always";
            };
            after = [
              "podman-network-librenms_default.service"
            ];
            requires = [
              "podman-network-librenms_default.service"
            ];
            partOf = [
              "podman-compose-librenms-root.target"
            ];
            upheldBy = [
              "podman-librenms.service"
              "podman-librenms_redis.service"
            ];
            wantedBy = [
              "podman-compose-librenms-root.target"
            ];
          };
        };
      };
      virtualisation.oci-containers.containers = {
        # Containers
        ## librenms application
        "librenms" = {
          image = "librenms/librenms:latest";
          hostname = "librenms";
          environmentFiles = [
            config.age.secrets.librenms_COMMON_env.path
          ];
          volumes = [
            "${datalocation}/librenms:/data:rw"
          ];
          ports = [
            "8000:8000/tcp"
          ];
          dependsOn = [
            "librenms_db"
            "librenms_msmtpd"
            "librenms_redis"
          ];
          log-driver = "journald";
          extraOptions = [
            "--cap-add=NET_ADMIN"
            "--cap-add=NET_RAW"
            "--network-alias=librenms"
            "--network=librenms_default"
          ];
          autoStart = true;
        };
        # maria-db backend
        "librenms_db" = {
          image = "mariadb";
          hostname = "librenms-db";
          cmd = [
            # command line attributes for the entrypoint command
            "mariadbd"
            "--innodb-file-per-table=1"
            "--lower-case-table-names=0"
            "--character-set-server=utf8mb4"
            "--collation-server=utf8mb4_unicode_ci"
          ];
          volumes = "/var/lib/containerdata/librenms/db:/var/lib/mysql";
          environmentFiles = [
            config.age.secrets.librenms_COMMON_env.path
            config.age.librenms_MARIADB_env.path
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=librenms-db"
            "--network=librenms_default"
          ];
          autoStart = true;
        };
        # redis memcache
        "librenms_redis" = {
          image = "redis";
          hostname = "librenms-redis";
          environmentFiles = [
            config.age.secrets.librenms_COMMON_env.path
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=librenms-redis"
            "--network=librenms_default"
          ];
          autoStart = true;
        };

        "librenms_dispatcher" = {
          image = "librenms/librenms:latest";
          hostname = "librenms-dispatcher";
          environmentFiles = [
            config.age.secrets.librenms_COMMON_env.path
            config.age.secrets.librenms_DISPATCHER_env.path
          ];
          volumes = [
            "${datalocation}/librenms:/data:rw"
          ];
          dependsOn = [
            "librenms"
            "librenms_redis"
          ];
          log-driver = "journald";
          extraOptions = [
            "--cap-add=NET_ADMIN"
            "--cap-add=NET_RAW"
            "--network-alias=dispatcher"
            "--network=librenms_default"
          ];
        };
        "librenms_msmtpd" = {
          image = "crazymax/msmtpd:latest";

          environmentFiles = [
            ""
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=msmtpd"
            "--network=librenms_default"
          ];
        };

        "librenms_snmptrapd" = {
          image = "librenms/librenms:latest";
          hostname = "librenms-snmptrapd";
          environmentFiles = [
            ""
          ];
          volumes = [
            "string/librenms:/data:rw"
          ];
          ports = [
            "162:162/tcp"
            "162:162/udp"
          ];
          dependsOn = [
            "librenms"
            "librenms_redis"
          ];
          log-driver = "journald";
          extraOptions = [
            "--cap-add=NET_ADMIN"
            "--cap-add=NET_RAW"
            "--network-alias=snmptrapd"
            "--network=librenms_default"
          ];
        };

        "librenms_syslogng" = {
          image = "librenms/librenms:latest";
          environment = {
            CACHE_DRIVER = "redis";
            LIBRENMS_SNMP_COMMUNITY = "librenmsdocker";
            LIBRENMS_WEATHERMAP = "false";
            LIBRENMS_WEATHERMAP_SCHEDULE = "*/5 * * * *";
            LOG_IP_VAR = "remote_addr";
            MAX_INPUT_VARS = "1000";
            MEMORY_LIMIT = "256M";
            OPCACHE_MEM_SIZE = "128";
            REAL_IP_FROM = "0.0.0.0/32";
            REAL_IP_HEADER = "X-Forwarded-For";
            REDIS_HOST = "redis";
            SESSION_DRIVER = "redis";
            SIDECAR_SYSLOGNG = "1";
            UPLOAD_MAX_SIZE = "16M";
          };
          environmentFiles = [
            ""
          ];
          volumes = [
            "string/librenms:/data:rw"
          ];
          ports = [
            "514:514/tcp"
            "514:514/udp"
          ];
          dependsOn = [
            "librenms"
            "librenms_redis"
          ];
          log-driver = "journald";
          extraOptions = [
            "--cap-add=NET_ADMIN"
            "--cap-add=NET_RAW"
            "--hostname=librenms-syslogng"
            "--network-alias=syslogng"
            "--network=librenms_default"
          ];
        };
      };

      #services.oxidized.enable = true;
      system.stateVersion = "24.05";
    };
  };
}
